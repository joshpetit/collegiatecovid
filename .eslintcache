[{"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/index.js":"1","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/reportWebVitals.js":"2","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/App.js":"3","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/HomePage.js":"4","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/App1.js":"5","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/HomePageComponents/SearchBarz.js":"6","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/SchoolPageComponents/SchoolPage.js":"7","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/HomePageComponents/schools.js":"8","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/HomePageComponents/NavBar.js":"9","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/SchoolPageComponents/Header.js":"10","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/SchoolPageComponents/StatisticSection.js":"11","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/SchoolPageComponents/PolicySection.js":"12","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/SchoolDataObjects/SchoolData.js":"13","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/SchoolPageComponents/Statistic.js":"14","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/data/schoolPolicies.js":"15"},{"size":500,"mtime":1607224147859,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1607211604074,"results":"18","hashOfConfig":"17"},{"size":165,"mtime":1607277772594,"results":"19","hashOfConfig":"17"},{"size":654,"mtime":1607275040303,"results":"20","hashOfConfig":"17"},{"size":190,"mtime":1607219737489,"results":"21","hashOfConfig":"17"},{"size":1138,"mtime":1607277001051,"results":"22","hashOfConfig":"17"},{"size":534,"mtime":1607277772586,"results":"23","hashOfConfig":"17"},{"size":337,"mtime":1607240734853,"results":"24","hashOfConfig":"17"},{"size":1659,"mtime":1607280638346,"results":"25","hashOfConfig":"17"},{"size":480,"mtime":1607277772584,"results":"26","hashOfConfig":"17"},{"size":714,"mtime":1607277772587,"results":"27","hashOfConfig":"17"},{"size":571,"mtime":1607277772585,"results":"28","hashOfConfig":"17"},{"size":2147,"mtime":1607277772583,"results":"29","hashOfConfig":"17"},{"size":258,"mtime":1607277772587,"results":"30","hashOfConfig":"17"},{"size":4168,"mtime":1607277772587,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"txnxgv",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/index.js",[],["66","67"],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/reportWebVitals.js",[],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/App.js",[],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/HomePage.js",["68"],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/App1.js",[],["69","70"],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/HomePageComponents/SearchBarz.js",[],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/SchoolPageComponents/SchoolPage.js",[],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/HomePageComponents/schools.js",[],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/HomePageComponents/NavBar.js",["71","72","73"],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/SchoolPageComponents/Header.js",[],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/SchoolPageComponents/StatisticSection.js",[],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/SchoolPageComponents/PolicySection.js",[],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/SchoolDataObjects/SchoolData.js",["74"],"//Code to read Json from a file take from:\n//https://medium.com/@osiolabs/read-write-json-files-with-node-js-92d03cc82824#:~:text=Reading%20a%20JSON%20file,data%20into%20a%20JavaScript%20object.\n\nimport SchoolPolicies from \"../data/schoolPolicies\"\n\nexport default class SchoolData {\n    constructor(name) {\n        //need a way or a place to get data from\n        /**\n        const schoolPolicies = new SchoolPolicies();\n        const schoolDataObj = JSON.parse(schoolPolicies.schoolPolicies)\n        const  = this.getNamedUniversity(schoolDataObj,name)\n         */\n\n        //mock data\n        const imgUrl = \"./duke.png\"\n\n        const schoolPolicy = {name:\"Duke University\", frequency:\"1 per week\", people: \"everyone tested\",\n        classes:\"blended\", checkin:\"everyday\"}\n\n        const data =\n            {name: \"Duke University\",\n            cases: 12000000,\n            tests: 23,\n            positivity: 6.23,\n            isolation: 28\n        }\n\n        //initialization of data\n        this.name = schoolPolicy.name;\n        this.frequency = schoolPolicy.frequency;\n        this.people = schoolPolicy.people;\n        this.classes = schoolPolicy.classes;\n        this.checkin = schoolPolicy.checkin;\n        this.cases = data.cases;\n        this.tests = data.tests;\n        this.positivity = data.positivity;\n        this.isolation = data.isolation;\n        this.imgUrl = imgUrl;\n    }\n\n    /**\n    readJson(filepath) {\n        const fs = require('fs');\n\n        fs.readFile(filepath, 'utf8', (err, jsonString) => {\n            if (err) {\n                console.log(\"File read failed:\", err)\n                return\n            }\n            try {\n                const data = JSON.parse(jsonString)\n                console.log(\"parse successful\") // => \"Customer address is: Infinity Loop Drive\"\n                return data;\n            } catch(err) {\n                console.log('Error parsing JSON string:', err)\n            }\n        })\n    }\n     */\n\n    getNamedUniversity(data, name) {\n        let obj;\n        for (obj in data) {\n            if (obj.name === name) {\n                return obj;\n            }\n        }\n    }\n\n}\n\n\n","/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/SchoolPageComponents/Statistic.js",[],"/Users/herbertwang/Desktop/CodeforGood/collegiatecovidtracker/src/data/schoolPolicies.js",["75"],"\nclass SchoolPolicies {\n    constructor() {\n        this.schoolPolicies = schoolPolicies\n    }\n}\n\n    const schoolPolicies = [\n        {\n            \"name\": \"Duke University\",\n            \"frequency\": \"2 times a week\",\n            \"people\": \"surveillance testing of all students & faculty on campus\",\n            \"classes\": \"Both Remote & In-Person Instruction\",\n            \"checkin\": \"Required Daily\"\n        },\n        {\n            \"name\": \"University of Illinois Urbana-Champaign\",\n            \"frequency\": \"2 times a week\",\n            \"people\": \"surveillance testing of all students & faculty on campus\",\n            \"classes\": \"Both Remote & In-Person Instruction\",\n            \"checkin\": \"Not Required\"\n        },\n        {\n            \"name\": \"University of Virginia\",\n            \"frequency\": \"1 time a week\",\n            \"people\": \"surveillance testing of all students & faculty on campus\",\n            \"classes\": \"Both Remote & In-Person Instruction\",\n            \"checkin\": \"Required Daily\"\n        },\n        {\n            \"name\": \"Ohio State University\",\n            \"frequency\": \"1 time a week\",\n            \"people\": \"surveillance testing of all students & faculty on campus\",\n            \"classes\": \"Both Remote & In-Person Instruction\",\n            \"checkin\": \"Required Daily\"\n        },\n        {\n            \"name\": \"Harvard University\",\n            \"frequency\": \"N/A\",\n            \"people\": \"surveillance testing of all students & faculty on campus\",\n            \"classes\": \"Fully Remote Online Instruction\",\n            \"checkin\": \"Not Required\"\n        },\n        {\n            \"name\": \"Rice University\",\n            \"frequency\": \"1 time a week\",\n            \"people\": \"surveillance testing of all students & faculty on campus\",\n            \"classes\": \"Both Remote & In-Person Instruction\",\n            \"checkin\": \"Only if Symptomatic\"\n        },\n        {\n            \"name\": \"Yale University\",\n            \"frequency\": \"2 times a week\",\n            \"people\": \"surveillance testing of all students on campus\",\n            \"classes\": \"Both Remote & In-Person Instruction\",\n            \"checkin\": \"Required Daily\"\n        },\n        {\n            \"name\": \"Stanford University\",\n            \"frequency\": \"1 time a week\",\n            \"people\": \"surveillance testing of all students & faculty on campus\",\n            \"classes\": \"Fully Remote Online Instruction\",\n            \"checkin\": \"Not Required\"\n        },\n        {\n            \"name\": \"Tulane University\",\n            \"frequency\": \"1 time a week\",\n            \"people\": \"surveillance testing of all students on campus\",\n            \"classes\": \"Both Remote & In-Person Instruction\",\n            \"checkin\": \"Required Daily\"\n        },\n        {\n            \"name\": \"Carnegie Mellon University\",\n            \"frequency\": \"<1 time a week\",\n            \"people\": \"surveillance testing of all students & faculty on campus\",\n            \"classes\": \"Both Remote & In-Person Instruction\",\n            \"checkin\": \"Required Daily\"\n        },\n        {\n            \"name\": \"University of Michigan\",\n            \"frequency\": \"Not Required\",\n            \"people\": \"symptomatic students & faculty, voluntary asymptomatic tests\",\n            \"classes\": \"Both Remote & In-Person Instruction\",\n            \"checkin\": \"Required Daily\"\n        },\n        {\n            \"name\": \"Oklahoma State University\",\n            \"frequency\": \"Not Required\",\n            \"people\": \"symptomatic students & faculty, voluntary asymptomatic tests\",\n            \"classes\": \"Both Remote & In-Person Instruction\",\n            \"checkin\": \"Not Required\"\n        },\n        {\n            \"name\": \"University of Florida\",\n            \"frequency\": \"Not Required\",\n            \"people\": \"voluntary testing for students and faculty\",\n            \"classes\": \"Both Remote & In-Person Instruction\",\n            \"checkin\": \"Not Required\"\n        },\n        {\n            \"name\": \"University of Nebraska Lincoln\",\n            \"frequency\": \"Not Required\",\n            \"people\": \"voluntary testing for students and faculty\",\n            \"classes\": \"Both Remote & In-Person Instruction\",\n            \"checkin\": \"Not Required\"\n        }\n    ];\n\n",{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":8,"column":13,"nodeType":"82","endLine":8,"endColumn":52},{"ruleId":"76","replacedBy":"83"},{"ruleId":"78","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":19,"column":9,"nodeType":"87","endLine":19,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":37,"column":54,"nodeType":"90","endLine":40,"endColumn":21},{"ruleId":"85","severity":1,"message":"86","line":46,"column":26,"nodeType":"87","endLine":46,"endColumn":36},{"ruleId":"91","severity":1,"message":"92","line":4,"column":8,"nodeType":"93","messageId":"94","endLine":4,"endColumn":22},{"ruleId":"91","severity":1,"message":"92","line":2,"column":7,"nodeType":"93","messageId":"94","endLine":2,"endColumn":21},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["95"],["96"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-unused-vars","'SchoolPolicies' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]